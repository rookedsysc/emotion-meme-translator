services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile-frontend
    restart: unless-stopped
    expose:
      - "5173"
        #    volumes:
        #      - ./frontend:/app
        #      - /app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - app-network
    depends_on:
      - backend

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./logs:/var/log/nginx
    depends_on:
      - fronted
      - backend
    networks:
      app-network:
        ipv4_address: 172.21.0.5


  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 3M & wait $${!}; done;'"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile-backend
    ports:
      - "8080:8080"
    networks:
      app-network:
        ipv4_address: 172.21.0.10

  db:
    build:
      context: ./db
      dockerfile: Dockerfile-db
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=meme    
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      app-network:
        ipv4_address: 172.21.0.30
  
networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres_data:


